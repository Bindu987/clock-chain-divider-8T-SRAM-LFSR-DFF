`timescale 1ns / 1ps

module tb_sram_clock_chain_divider;

    reg clk, rst, en_clk, en_pwr, test_mode;
    wire [7:0] out;
    reg [7:0] prev_out;

    sram_clock_chain_divider uut (
        .clk(clk),
        .rst(rst),
        .en_clk(en_clk),
        .en_pwr(en_pwr),
        .test_mode(test_mode),
        .out(out)
    );

    initial clk = 0;
    always #5 clk = ~clk;

    always @(posedge clk) begin
        if (rst)
            $display("%0t ns | RESET         | out = %b", $time, out);
        else if (test_mode)
            $display("%0t ns | TEST MODE     | out = %b", $time, out);
        else if (!en_clk)
            $display("%0t ns | CLOCK GATED   | out = %b", $time, out);
        else if (!en_pwr)
            $display("%0t ns | POWER GATED   | out = %b", $time, out);
        else if (out != prev_out)
            $display("%0t ns | UPDATING      | out = %b", $time, out);
        else
            $display("%0t ns | HOLDING       | out = %b", $time, out);

        prev_out <= out;
    end

    initial begin
        $dumpfile("sram_chain.vcd");
        $dumpvars(0, tb_sram_clock_chain_divider);

        rst = 1; en_clk = 0; en_pwr = 0; test_mode = 0;
        prev_out = 0;
        #12 rst = 0;

        #10 en_clk = 1; en_pwr = 1;
        #100;

        #10 en_clk = 0;  // Clock gating
        #30 en_clk = 1;

        #10 en_pwr = 0;  // Power gating
        #30 en_pwr = 1;

        #10 test_mode = 1;  // Test override
        #40 test_mode = 0;

        #20;
        $display("=== Simulation Complete ===");
        $finish;
    end

endmodule
